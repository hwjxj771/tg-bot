const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const GAME_URL = 'https://t.me/gift_run_bot/tgiftiF12QIDdag';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userChatIds = new Set();

// –ö–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π chatId
bot.onText(/\/myid/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `–í–∞—à chatId: ${chatId}`);
    console.log(`ChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
});

// –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userChatIds.add(chatId);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}, –≤—Å–µ–≥–æ: ${userChatIds.size}`);
    
    const keyboard = {
        inline_keyboard: [[
            {
                text: '–ò–≥—Ä–∞—Ç—å üöÄ',
                url: GAME_URL
            }
        ]]
    };
    
    bot.sendPhoto(chatId, 'https://raw.githubusercontent.com/hwjxj771/tg-bot/main/bot4.png', {
        caption: '–ö–ª–∏–∫–µ—Ä! –ö–µ–π—Å—ã! CRUSH MODE! –ò –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã!üí´ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–æ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä—ã - @gift_run',
        reply_markup: keyboard
    });
});

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcastMessage() {
    const message = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω - –æ—Ç–∫—Ä—ã–≤–∞–π –∏ –∑–∞–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—É üî•';
    
    const keyboard = {
        inline_keyboard: [[
            {
                text: '–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É üéÅ',
                url: GAME_URL
            }
        ]]
    };
    
    console.log(`–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userChatIds.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const chatId of userChatIds) {
        try {
            await bot.sendMessage(chatId, message, {
                reply_markup: keyboard
            });
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error.message);
            errorCount++;
            if (error.response?.statusCode === 403) {
                userChatIds.delete(chatId);
            }
        }
    }
    
    console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
    return { successCount, errorCount };
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞)
bot.onText(/\/broadcast/, async (msg) => {
    const chatId = msg.chat.id;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const result = await sendBroadcastMessage();
    bot.sendMessage(chatId, `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.successCount}, –û—à–∏–±–æ–∫: ${result.errorCount}`);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –∏–∑–≤–Ω–µ
module.exports = { sendBroadcastMessage };