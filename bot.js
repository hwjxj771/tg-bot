const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    const client = await pool.connect();
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        chat_id BIGINT PRIMARY KEY,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUser(chatId, userInfo = {}) {
  try {
    const { username, first_name, last_name } = userInfo;
    await pool.query(
      `INSERT INTO users (chat_id, username, first_name, last_name, last_active) 
       VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
       ON CONFLICT (chat_id) 
       DO UPDATE SET 
         username = EXCLUDED.username,
         first_name = EXCLUDED.first_name,
         last_name = EXCLUDED.last_name,
         last_active = CURRENT_TIMESTAMP`,
      [chatId, username, first_name, last_name]
    );
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getAllUsers() {
  try {
    const result = await pool.query('SELECT chat_id FROM users');
    return result.rows.map(row => row.chat_id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUserCount() {
  try {
    const result = await pool.query('SELECT COUNT(*) as count FROM users');
    return parseInt(result.rows[0].count);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return 0;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function removeUser(chatId) {
  try {
    await pool.query('DELETE FROM users WHERE chat_id = $1', [chatId]);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const GAME_URL = 'https://t.me/gift_run_bot/tgiftiF12QIDdag';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initDatabase();

// –ó–ê–ú–ï–ù–ò –≠–¢–û–¢ –ù–û–ú–ï–† –ù–ê –°–í–û–ô CHAT_ID (—É–∑–Ω–∞–µ—à—å —á–µ—Ä–µ–∑ /myid)
const ADMIN_IDS = [7002066167];

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId
bot.onText(/\/myid/, async (msg) => {
  const chatId = msg.chat.id;
  const userCount = await getUserCount();
  bot.sendMessage(chatId, `üìä –í–∞—à chatId: ${chatId}\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
  console.log(`ChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!ADMIN_IDS.includes(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }
  
  const userCount = await getUserCount();
  bot.sendMessage(chatId, `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userInfo = msg.from;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
  await addUser(chatId, userInfo);
  const userCount = await getUserCount();
  
  console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}, –≤—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${userCount}`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
  const keyboard = {
    inline_keyboard: [[
      {
        text: '–ò–≥—Ä–∞—Ç—å üöÄ',
        url: GAME_URL
      }
    ]]
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
  bot.sendPhoto(chatId, 'https://raw.githubusercontent.com/hwjxj771/tg-bot/main/bot4.png', {
    caption: '–ö–ª–∏–∫–µ—Ä! –ö–µ–π—Å—ã! CRUSH MODE! –ò –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã!üí´ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–æ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä—ã - @gift_run',
    reply_markup: keyboard
  });
});

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcastMessage() {
  const message = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω - –æ—Ç–∫—Ä—ã–≤–∞–π –∏ –∑–∞–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—É üî•';
  
  const keyboard = {
    inline_keyboard: [[
      {
        text: '–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É üéÅ',
        url: GAME_URL
      }
    ]]
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
  const allUsers = await getAllUsers();
  
  console.log(`üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const chatId of allUsers) {
    try {
      await bot.sendMessage(chatId, message, {
        reply_markup: keyboard
      });
      successCount++;
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error.message);
      errorCount++;
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
      if (error.response?.statusCode === 403) {
        await removeUser(chatId);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
      }
    }
  }
  
  console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
  return { successCount, errorCount, totalUsers: allUsers.length };
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.onText(/\/broadcast/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!ADMIN_IDS.includes(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }
  
  const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
  
  const result = await sendBroadcastMessage();
  
  await bot.editMessageText(
    `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUsers}\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.successCount}\n‚Ä¢ –û—à–∏–±–æ–∫: ${result.errorCount}`,
    {
      chat_id: chatId,
      message_id: processingMsg.message_id
    }
  );
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { sendBroadcastMessage }; 