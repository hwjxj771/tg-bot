const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');

// –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const GAME_URL = 'https://t.me/gift_run_bot/tgiftiF12QIDdag';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
if (!process.env.DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway.');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π (–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
async function initDatabase() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        chat_id BIGINT PRIMARY KEY,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞');
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUser(chatId) {
  try {
    await pool.query(
      `INSERT INTO users (chat_id) VALUES ($1) ON CONFLICT (chat_id) DO NOTHING`,
      [chatId]
    );
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getAllUsers() {
  try {
    const result = await pool.query('SELECT chat_id FROM users');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${result.rows.length}`);
    return result.rows.map(row => row.chat_id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    return [];
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUserCount() {
  try {
    const result = await pool.query('SELECT COUNT(*) as count FROM users');
    return parseInt(result.rows[0].count);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    return 0;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initDatabase();

// –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π chatId
const ADMIN_IDS = [7002066167];

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId
bot.onText(/\/myid/, async (msg) => {
  const chatId = msg.chat.id;
  const userCount = await getUserCount();
  bot.sendMessage(chatId, `üìä –í–∞—à chatId: ${chatId}\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
  console.log(`ChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.onText(/\/checkdb/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const userCount = await getUserCount();
    const allUsers = await getAllUsers();
    bot.sendMessage(chatId, `‚úÖ –ë–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}\nüìù –°–ø–∏—Å–æ–∫: ${allUsers.join(', ')}`);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: ${error.message}`);
  }
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
  
  // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
  const dbSuccess = await addUser(chatId);
  const userCount = await getUserCount();
  
  console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É: ${dbSuccess ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}, –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
  const keyboard = {
    inline_keyboard: [[
      {
        text: '–ò–≥—Ä–∞—Ç—å üöÄ',
        url: GAME_URL
      }
    ]]
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
  bot.sendPhoto(chatId, 'https://raw.githubusercontent.com/hwjxj771/tg-bot/main/bot4.png', {
    caption: '–ö–ª–∏–∫–µ—Ä! –ö–µ–π—Å—ã! CRUSH MODE! –ò –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã!üí´ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–æ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä—ã - @gift_run',
    reply_markup: keyboard
  });
});

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcastMessage() {
  const message = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω - –æ—Ç–∫—Ä—ã–≤–∞–π –∏ –∑–∞–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—É üî•';
  
  const keyboard = {
    inline_keyboard: [[
      {
        text: '–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É üéÅ',
        url: GAME_URL
      }
    ]]
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
  const allUsers = await getAllUsers();
  
  if (allUsers.length === 0) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
    return { successCount: 0, errorCount: 0, totalUsers: 0 };
  }
  
  console.log(`üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const chatId of allUsers) {
    try {
      await bot.sendMessage(chatId, message, {
        reply_markup: keyboard
      });
      successCount++;
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${chatId}`);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error.message);
      errorCount++;
    }
  }
  
  console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
  return { successCount, errorCount, totalUsers: allUsers.length };
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–í–†–ï–ú–ï–ù–ù–û –¥–ª—è –≤—Å–µ—Ö)
bot.onText(/\/broadcast/, async (msg) => {
  const chatId = msg.chat.id;
  
  console.log(`–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${chatId}`);
  
  const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
  
  const result = await sendBroadcastMessage();
  
  await bot.editMessageText(
    `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUsers}\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.successCount}\n‚Ä¢ –û—à–∏–±–æ–∫: ${result.errorCount}`,
    {
      chat_id: chatId,
      message_id: processingMsg.message_id
    }
  );
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');